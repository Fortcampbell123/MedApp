{
  "endpoint": "OPENAI",
  "model": "gpt-4-turbo-preview",
  "functions": [
    {
      "name": "implement_development_plan",
      "description": "Implements the development plan.",
      "parameters": {
        "type": "object",
        "properties": {
          "plan": {
            "type": "array",
            "description": "List of development tasks that need to be done to implement the entire plan.",
            "items": {
              "type": "object",
              "description": "Development task that needs to be done to implement the entire plan. It contains all details that developer who is not familiar with project needs to know to implement the task.",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Very detailed description of the development task that needs to be done to implement the entire plan."
                }
              },
              "required": [
                "description"
              ]
            }
          }
        },
        "required": [
          "plan"
        ]
      }
    }
  ],
  "response": {
    "plan": [
      {
        "description": "Implement the MongoDB connection using Mongoose in a new file named `database.js` in the `backend` folder. In this file, use dotenv to load environment variables and mongoose to connect to MongoDB. The connection string should be stored in a `.env` file at the root of the project for security reasons. This task includes handling connection errors and logging successful database connection messages to the console."
      },
      {
        "description": "Set up the Express server in a file named `server.js` in the `backend` folder. This server should import Express and initialize it to listen on a port specified in the `.env` file. The server should have a simple GET route `/api/ping` that returns a JSON response `{ success: true, message: 'Pong' }` to test if the server is running. Use dotenv to load the port from the `.env` file."
      },
      {
        "description": "Create the user authentication system in the `backend` folder. This system includes a model for users in `models/userModel.js`, using Mongoose schema that contains fields for username, password (hashed), and roles. Implement password hashing in the user model's `pre-save` hook using bcrypt. Also, set up routes for user registration and login in a new file `routes/authRoutes.js`, utilizing express-session for session management."
      },
      {
        "description": "Develop the frontend login page using React. In the `src` folder, create a new component `Login.jsx` that includes form inputs for username and password, and a submit button. Use Axios to send a POST request to the backend's login route when the form is submitted. Handle authentication feedback (success/error) and redirect to the main Todo List page upon successful login."
      },
      {
        "description": "Implement the Todo List functionality in the backend. This includes creating a Todo model in `models/todoModel.js` with fields for task name, description, due date, priority, status, and associated client ID. Create a new file `routes/todoRoutes.js` for the Todo-related routes (CRUD operations). Ensure these routes include middleware for authentication and authorization checks based on user roles and client assignments."
      },
      {
        "description": "Build the frontend Todo List interface in React within the `src` folder. Create components `TodoList.jsx` and `TodoItem.jsx` for displaying the list of tasks and individual tasks, respectively. These components should fetch and display data from the backend, support sorting/filtering tasks, and provide UI elements for marking tasks as completed and deleting tasks. Use Axios for API requests and Bootstrap for styling."
      },
      {
        "description": "Add the ability for users to add and edit Todo items via modal forms in the frontend. Create two new components, `AddTodoModal.jsx` and `EditTodoModal.jsx`, which include form inputs for task name, description, due date, and priority level. These components should handle form submissions by sending POST and PUT requests to the backend's corresponding Todo routes. Integrate these modals into the `TodoList.jsx` component."
      },
      {
        "description": "Implement access control in both frontend and backend. In the backend, enhance the authentication middleware to verify user roles and permissions before allowing access to specific routes. In the frontend, conditionally render UI components based on the user's role and permissions (e.g., editing and deleting Todo items). This task includes updating the React Router setup in `App.jsx` to protect certain routes based on user authentication and role."
      },
      {
        "description": "Set up notifications for upcoming Todo item deadlines in the backend. Create a script in the `backend` folder that periodically checks for Todo items nearing their due dates and sends notifications via email. Utilize a library like Nodemailer for email sending, and configure it to use SMTP with credentials stored in the `.env` file. The frequency of the checks and the definition of 'upcoming' (e.g., within 24 hours) should be configurable."
      },
      {
        "description": "Finalize the project by ensuring all environment variables are properly configured in the `.env` file, including database connection strings, server port, session secret, and email SMTP settings. Check that the frontend and backend are fully integrated, with the frontend correctly displaying data from the backend and handling user interactions. This task also includes a final review of the codebase for consistency, readability, and adherence to best practices."
      }
    ]
  }
}