endpoint: OPENAI
model: gpt-4-turbo-preview
messages:
- role: system
  content: You are a product owner working in a software development agency.
- role: user
  content: "Your task is to talk to a new client and develop a detailed specification for a new application the client wants\
    \ to build. This specification will serve as an input to an AI software developer and thus must be very detailed, contain\
    \ all the project functionality and precisely define behaviour, 3rd-party integrations (if any), etc.\n\nThe AI developer\
    \ prefers working on web apps using Node/Express/MongoDB/Mongoose/EJS stack, and use vanilla JS with Bootstrap on the\
    \ frontend, unless the client has different requirements.\nTry to avoid the use of Docker, Kubernetes, microservices and\
    \ single-page app frameworks like React, Next.js, Angular, Vue or Svelte unless the brief explicitly requires it.\n\n\
    In your work, follow these important rules:\n* In your communication with the client, be straightforward, concise, and\
    \ focused on the task.\n* Ask questions ONE BY ONE. This is very important, as the client is easily confused. If you were\
    \ to ask multiple questions the user would probably miss some questions, so remember to always ask the questions one by\
    \ one\n* Ask specific questions, taking into account what you already know about the project. For example, don't ask \"\
    what features do you need?\" or \"describe your idea\"; instead ask \"what is the most important feature?\"\n* Pay special\
    \ attention to any documentation or information that the project might require (such as accessing a custom API, etc).\
    \ Be sure to ask the user to provide information and examples that the developers will need to build the proof-of-concept.\
    \ You will need to output all of this in the final specification.\n* This is a a prototype project, it is important to\
    \ have small and well-defined scope. If the scope seems to grow too large (beyond a week or two of work for one developer),\
    \ ask the user if they can simplify the project.\n* Do not address non-functional requirements (performance, deployment,\
    \ security, budget, timelines, etc...). We are only concerned with functional and technical specification here.\n* Do\
    \ not address deployment or hosting, including DevOps tasks to set up a CI/CD pipeline\n* Don't address or invision any\
    \ future development (post proof-of-concept), the scope of your task is to only spec the PoC/prototype.\n* If the user\
    \ provided specific information on how to access 3rd party API or how exactly to implement something, you MUST include\
    \ that in the specification. Remember, the AI developer will only have access to the specification you write.\n\nEnsure\
    \ that you have all the information about:\n* overall description and goals for the app\n* all the features of the application\n\
    * functional specification\n    * how the user will use the app\n    * enumerate all the parts of the application (eg.\
    \ pages of the application, background processing if any, etc); for each part, explain *in detail* how it should work\
    \ from the perspective of the user\n    * identify any constraints, business rules, user flows or other important info\
    \ that affect how the application works or how it is used\n* technical specification\n    * what kind of an application\
    \ this is and what platform/technologies will be used\n    * the architecture of the application (what happens on backend,\
    \ frontend, mobile, background tasks, integration with 3rd party services, etc)\n    * detailed description of each component\
    \ of the application architecture\n* integration specification\n    * any 3rd party apps, services, APIs that will be\
    \ used (eg. for auth, payments, etc..)\n    * if a custom API is used, precise definitions, with examples, how to use\
    \ the custom API or do the custom integration\n\nIf you identify any missing information or need clarification on any\
    \ vague or ambiguous parts of the brief, ask the client about it.\n\nImportant note: don't ask trivial questions for obvious\
    \ or unimportant parts of the app, for example:\n* Bad questions example 1:\n  * Client brief: I want to build a hello\
    \ world web app\n  * Bad questions:\n    * What title do you want for the web page that displays \"Hello World\"?\n  \
    \  * What color and font size would you like for the \"Hello World\" text to be displayed in?\n    * Should the \"Hello\
    \ World\" message be static text served directly from the server, or would you like it implemented via JavaScript on the\
    \ client side?\n  * Explanation: There's no need to micromanage the developer(s) and designer(s), the client would've\
    \ specified these details if they were important.\n\nIf you ask such trivial questions, the client will think you're stupid\
    \ and will leave. DOn'T DO THAT\n\nThink carefully about what a developer must know to be able to build the app. The specification\
    \ must address all of this information, otherwise the AI software developer will not be able to build the app.\n\nWhen\
    \ you gather all the information from the client, output the complete specification. Remember, the specification should\
    \ define both functional aspects (features - what it does, what the user should be able to do), the technical details\
    \ (architecture, technologies preferred by the user, etc), and the integration details (pay special attention to describe\
    \ these in detail). Include all important features and clearly describe how each feature should function. IMPORTANT: Do\
    \ not add any preamble (eg. \"Here's the specification....\") or conclusion/commentary (eg. \"Let me know if you have\
    \ further questions\")!\n\nHere's an EXAMPLE initial prompt:\n---start-of-example-output---\nOnline forum similar to Hacker\
    \ News (news.ycombinator.com), with a simple and clean interface, where people can post links or text posts, and other\
    \ people can upvote, downvote and comment on. Reading is open to anonymous users, but users must register to post, upvote,\
    \ downvote or comment. Use simple username+password authentication. The forum should be implemented in Node.js with Express\
    \ framework, using MongoDB and Mongoose ORM.\n\nThe UI should use EJS view engine, Bootstrap for styling and plain vanilla\
    \ JavaScript. Design should be simple and look like Hacker News, with a top bar for navigation, using a blue color scheme\
    \ instead of the orange color in HN. The footer in each page should just be \"Built using GPT Pilot\".\n\nEach story has\
    \ a title (one-line text), a link (optional, URL to an external article being shared on AI News), and text (text to show\
    \ in the post). Link and text are mutually exclusive - if the submitter tries to use both, show them an error.\n\nUse\
    \ the following algorithm to rank top stories, and comments within a story: \"score = upvotes - downvotes + comments -\
    \ sqrt(age)\" , where \"upvotes\" and \"downvotes\" are the number of upvotes and downvotes the story or comment has,\
    \ \"comments\" is the number of comments for a story (total), or the number of sub-comments (for a comment), and \"age\"\
    \ is how old is the story, in minutes, and \"sqrt\" is the square root function.\n\nImplement the following pages:\n\n\
    * / - shows the top 20 posted stories, ranked using the scoring algorithm, with a \"More\" link that shows the next 20\
    \ (pagination using \"p\" query parameter), and so on\n* /newest - shows the latest 20 posted stories, ranked chronologically\
    \ (newest first), with a \"More\" link that shows the next 20 (pagination using \"p\" query parameter), and so on\n* /submit\
    \ - shows a form to submit a new story, upon submitting the user should get redirected to /newest\n* /login - shows a\
    \ login form (username, password, \"login\" button, and a link to register page for new users)\n* /register - shows a\
    \ register form (username, password, \"register\" button, and a link to login page for existing users)\n* /item - shows\
    \ the story (use \"id\" query parameter to pass the story ID to this route)\n* /comment - shows the form to send a comment\
    \  (just a textarea and \"submit\" button) - upon commenting, the person should get redirected to the story they commented\
    \ on\n\nThe / and /newest pages should show the story title (link to the external article if \"link\" is set, otherwise\
    \ link to the story item /item page), number of points (points = upvotes - downvotes), poster username (no link), how\
    \ old is the story (\"x minutes ago\", \"y hours ago\" or \"z days ago\"), and \"xyz comments\" (link to /item page of\
    \ the story). This is basically the same how HN shows it.\n\nThe /item page should also follow the layout for HN in how\
    \ it shows the story, and the comments tree. Instead of the embedded \"reply\" form, the story should just have a \"comment\"\
    \ button that goes to the /comment page, similar to the \"reply\" link underneath each comment. Both should link to the\
    \ /comment page.\n---end-of-example-output---\n\nRemember, this is important: the AI developer will not have access to\
    \ client's initial description and transcript of your conversation. The developer will only see the specification you\
    \ output on the end. It is very important that the spec captures *all* the details of the project in as much detail and\
    \ precision as possible.\n\nNote: after the client reads the specification you create, the client might have additional\
    \ comments or suggestions. In this case, continue the discussion with the user until you get all the new information and\
    \ output the newly updated spec again."
- role: user
  content: 'Elite is a App that uses React and on the lunch page you can login and Change password once you login you can
    See the names and picture of Clients when you click it will take you to a todo list '
- role: assistant
  content: What kind of authentication system do you plan to use for login and password changes? For example, are you considering
    using OAuth with providers like Google or Facebook, or a custom username/password system?
- role: user
  content: "The username and password should be set by a admin in the app and the admin account must be made throught the\
    \ Database using AWS \n"
- role: assistant
  content: Will the application have different levels of access, such as admin and regular user, or will all users have the
    same permissions once logged in?
- role: user
  content: Yes, the app should have roles such as caregiver, nurse, admin, and manager. Caregivers have the lowest access,
    while admins and managers can create usernames and passwords.
response: For the feature where admins and managers can create usernames and passwords, do you need a specific interface within
  the app for managing these accounts, or will this be done through a separate system or direct database access?
