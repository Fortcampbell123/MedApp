endpoint: OPENAI
model: gpt-3.5-turbo
messages:
- role: system
  content: "You're a software developer AI assistant. Your task is to explain the functionality implemented by a particular\
    \ source code file.\n\nGiven a file path and file contents, your output should contain:\n\n* a short explanation of what\
    \ the file is about;\n* a list of all other files referenced (imported) from this file. note that some libraries, frameworks\
    \ or libraries assume file extension and don't use it explicitly. For example, \"import foo\" in Python references \"\
    foo.py\" without specifying the extension. In your response, use the complete file name including the implied extension;\n\
    \nOutput the result in a JSON format with the following structure, as in this example:\n\nExample:\n{\n    \"summary\"\
    : \"Describe in detail the functionality being defind o implemented in this file. Be as detailed as possible\",\n    \"\
    references\": [\n        \"some/file.py\",\n        \"some/other/file.js\"\n    ],\n}\n\nYour response must be a valid\
    \ JSON document, following the example format. Do not add any extra explanation or commentary outside the JSON document.\n"
- role: user
  content: "Here's the `src\\components\\Login.jsx` file:\n```\nimport React, { useState } from 'react';\nimport axios from\
    \ 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Login() {\n    const [username, setUsername] =\
    \ useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const\
    \ navigate = useNavigate();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n \
    \           const response = await axios.post('/api/login', { username, password });\n            if (response.data.success)\
    \ {\n                console.log('Login successful, redirecting to Todo List.');\n                navigate('/todo-list');\
    \ // Adjust the route as per your setup\n            } else {\n                setError('Failed to login');\n        \
    \        console.error('Login failed: ', response.data.message);\n            }\n        } catch (err) {\n           \
    \ setError('Login error: ' + err.message);\n            console.error('Error during login: ', err);\n        }\n    };\n\
    \n    return (\n        <div>\n            <h2>Login</h2>\n            <form onSubmit={handleSubmit}>\n              \
    \  <div>\n                    <label>Username:</label>\n                    <input\n                        type=\"text\"\
    \n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n  \
    \                  />\n                </div>\n                <div>\n                    <label>Password:</label>\n \
    \                   <input\n                        type=\"password\"\n                        value={password}\n    \
    \                    onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n \
    \               <button type=\"submit\">Login</button>\n                {error && <p>{error}</p>}\n            </form>\n\
    \        </div>\n    );\n}\n\nexport default Login;\n```\n"
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"summary\": {\n        \"type\": \"string\",\n        \"\
    description\": \"Describe in detail the functionality being defined or implemented in this file. Be as detailed as possible.\"\
    \n    },\n    \"references\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"string\"\
    ,\n            \"description\": \"Path to a file that is referenced in the current file, relative to the project root.\"\
    \n        },\n        \"description\": \"List of file references.\"\n    }\n}\n```\n\n"
response: "{\n    \"summary\": \"This file defines a React functional component for a login form. It handles user input for\
  \ username and password, makes an asynchronous POST request to '/api/login' using axios, and redirects the user to '/todo-list'\
  \ upon successful login. Error messages are displayed if login fails.\",\n    \"references\": [\n        \"react\",\n  \
  \      \"axios\",\n        \"react-router-dom\"\n    ]\n}"
