endpoint: OPENAI
model: gpt-4-turbo-preview
messages:
- role: system
  content: 'You are a world class full stack software developer working in a team.


    You write modular, well-organized code split across files that are not too big, so that the codebase is maintainable.
    You include proper error handling and logging for your clean, readable, production-level quality code.


    Your job is to implement tasks assigned by your tech lead, following task implementation instructions.'
- role: user
  content: "You are working on a App called \"Elite\" and you need to write code for the entire app based on the tasks that\
    \ the tech lead gives you. So that you understand better what you're working on, you're given other specs for \"Elite\"\
    \ as well.\n\nHere is a high level description of \"Elite\":\n```\nTodo List Functionality:\n\n1. **Add Todo Item**: Users\
    \ can add tasks with details such as task name, description, due date, and priority level. Should there be any specific\
    \ fields related to healthcare activities that need to be included in the task details?\n\n2. **View Todo List**: Display\
    \ a list of tasks for each client, with the ability to sort or filter tasks by status (pending, completed), due date,\
    \ or priority.\n\n3. **Edit Todo Item**: Users can edit the details of an existing task. Are there any restrictions on\
    \ who can edit tasks (e.g., only the user who created the task or any user with access to that client)?\n\n4. **Mark as\
    \ Completed**: Users can mark tasks as completed. Should there be an option to revert a task back to pending status?\n\
    \n5. **Delete Todo Item**: Users can delete tasks. Should this be a soft delete (where the task is hidden but not permanently\
    \ removed) or a hard delete (permanently removed)?\n\n6. **Access Control**: Define which roles have access to view and\
    \ manage the Todo lists. Is access to Todo lists based on the client they are assigned to, or can certain roles view all\
    \ clients' Todo lists?\n\n7. **Notifications/Reminders**: Should the system send notifications or reminders for upcoming\
    \ deadlines for tasks? If so, which method(s) should be used (email, SMS, in-app notifications)?\n\nPlease provide details\
    \ on these aspects of the Todo list functionality to ensure the specification fully captures the project requirements.\n\
    Additional info/examples:\n1. The app is built using React.\n2. The app features a login page.\n3. Users can change their\
    \ password.\n4. Upon login, users can see the names and pictures of clients.\n5. Clicking on a client's name or picture\
    \ takes the user to that client's todo list.\n```\n\nHere is a short description of the project architecture:\nThe application\
    \ will have a React front-end for dynamic user interfaces, with Node.js and Express serving as the backend for API requests,\
    \ and MongoDB for the database. Authentication will be handled via session-based login, and the app will provide CRUD\
    \ operations for todo items, along with access control and notifications.\n\nHere are the technologies that you need to\
    \ use for this project:\n\n* Node.js - JavaScript runtime for building apps. This is required to be able to run the app\
    \ you're building.\n* MongoDB - NoSQL database. If you don't want to install MongoDB locally, you can use a cloud version\
    \ such as MongoDB Atlas.\n* express - Express web server for Node\n* mongoose - Mongoose ORM for MongoDB interactions\n\
    * bcrypt - Library to help hash passwords\n* express-session - Middleware for session management in Express\n* react -\
    \ A JavaScript library for building user interfaces\n* react-dom - React package for working with the DOM\n* react-router-dom\
    \ - DOM bindings for React Router\n* axios - Promise based HTTP client for the browser and node.js\n* bootstrap - Front-end\
    \ framework for developing responsive, mobile first projects on the web\n* dotenv - Module to load environment variables\
    \ from a .env file\n\n\n\nThese files are currently implemented:\n* `.eslintrc.cjs`: Configuration file for ESLint, a\
    \ static code analysis tool for identifying problematic patterns found in JavaScript code. It defines rules for linting\
    \ JavaScript code with a focus on React applications.\n* `.gitignore`: Specifies patterns to exclude files and directories\
    \ from being tracked by Git version control system. It is used to prevent certain files from being committed to the repository.\n\
    * `index.html`: Main entry point for the project. It includes a basic HTML structure with a root div element and a script\
    \ tag importing a JavaScript file named main.jsx using the module type. References: src/main.jsx\n* `package.json`: Standard\
    \ Nodejs package metadata file, specifies dependencies and start scripts. It also specifies that the project is a module.\n\
    * `vite.config.js`: Configuration file for Vite, a fast developer-friendly Javascript bundler/devserver.\n* `public/.gitkeep`:\
    \ (unknown)\n* `src/App.css`: This file defines CSS styles for the root element of the application, setting a maximum\
    \ width, centering it on the page, adding padding, and aligning text to the center.\n* `src/App.jsx`: This file defines\
    \ a functional component named App that renders a heading element with the text 'Elite'. The component is exported as\
    \ the default export. [References: src/App.css]\n* `src/index.css`: This CSS file defines styling rules for the root element,\
    \ body, and h1 elements. It sets font properties for better rendering and layout properties for centering content.\n*\
    \ `src/main.jsx`: This file is the main entry point for a React application. It imports React and ReactDOM to render the\
    \ main App component into the root element of the HTML document. [References: App.jsx, index.css]\n* `src\\assets/.gitkeep`:\
    \ (unknown)\nHere are the relevant files:\n---START_OF_FILES---\n**\\.eslintrc.cjs** (21 lines of code):\n```\nmodule.exports\
    \ = {\n  root: true,\n  env: { browser: true, es2020: true },\n  extends: [\n    'eslint:recommended',\n    'plugin:react/recommended',\n\
    \    'plugin:react/jsx-runtime',\n    'plugin:react-hooks/recommended',\n  ],\n  ignorePatterns: ['dist', '.eslintrc.cjs'],\n\
    \  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\n  settings: { react: { version: '18.2' } },\n  plugins:\
    \ ['react-refresh'],\n  rules: {\n    'react/jsx-no-target-blank': 'off',\n    'react-refresh/only-export-components':\
    \ [\n      'warn',\n      { allowConstantExport: true },\n    ],\n  },\n}\n\n```\n\n**\\.gitignore** (24 lines of code):\n\
    ```\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\n\
    dist\ndist-ssr\n*.local\n\n# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n\
    *.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n```\n\n**\\index.html** (12 lines of code):\n```\n<!doctype html>\n<html lang=\"en\"\
    >\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\
    \ />\n    <title>Elite</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"\
    ></script>\n  </body>\n</html>\n\n```\n\n**\\package.json** (26 lines of code):\n```\n{\n  \"name\": \"Elite\",\n  \"\
    private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"\
    build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\"\
    ,\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"\
    ^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.64\",\n    \"@types/react-dom\": \"^18.2.21\"\
    ,\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.0\",\n\
    \    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\n    \"vite\": \"^5.1.6\"\
    \n  }\n}\n\n```\n\n**\\vite.config.js** (7 lines of code):\n```\nimport { defineConfig } from 'vite'\nimport react from\
    \ '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n})\n\n\
    ```\n\n**src\\App.css** (7 lines of code):\n```\n#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n\
    \  text-align: center;\n}\n\n\n```\n\n**src\\App.jsx** (11 lines of code):\n```\nimport './App.css'\n\nfunction App()\
    \ {\n  return (\n    <>\n      <h1>Elite</h1>\n    </>\n  )\n}\n\nexport default App\n\n```\n\n**src\\index.css** (20\
    \ lines of code):\n```\n:root {\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing:\
    \ antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n\
    \  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\n\n```\n\n**src\\\
    main.jsx** (10 lines of code):\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from\
    \ './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n\
    \    <App />\n  </React.StrictMode>,\n)\n\n```\n\n---END_OF_FILES---\n\n\nWe've broken the development of this app down\
    \ to these tasks:\n```\n1. Implement the MongoDB connection using Mongoose in a new file named `database.js` in the `backend`\
    \ folder. In this file, use dotenv to load environment variables and mongoose to connect to MongoDB. The connection string\
    \ should be stored in a `.env` file at the root of the project for security reasons. This task includes handling connection\
    \ errors and logging successful database connection messages to the console.\n\n2. Set up the Express server in a file\
    \ named `server.js` in the `backend` folder. This server should import Express and initialize it to listen on a port specified\
    \ in the `.env` file. The server should have a simple GET route `/api/ping` that returns a JSON response `{ success: true,\
    \ message: 'Pong' }` to test if the server is running. Use dotenv to load the port from the `.env` file.\n\n3. Create\
    \ the user authentication system in the `backend` folder. This system includes a model for users in `models/userModel.js`,\
    \ using Mongoose schema that contains fields for username, password (hashed), and roles. Implement password hashing in\
    \ the user model's `pre-save` hook using bcrypt. Also, set up routes for user registration and login in a new file `routes/authRoutes.js`,\
    \ utilizing express-session for session management.\n\n4. Develop the frontend login page using React. In the `src` folder,\
    \ create a new component `Login.jsx` that includes form inputs for username and password, and a submit button. Use Axios\
    \ to send a POST request to the backend's login route when the form is submitted. Handle authentication feedback (success/error)\
    \ and redirect to the main Todo List page upon successful login.\n\n5. Implement the Todo List functionality in the backend.\
    \ This includes creating a Todo model in `models/todoModel.js` with fields for task name, description, due date, priority,\
    \ status, and associated client ID. Create a new file `routes/todoRoutes.js` for the Todo-related routes (CRUD operations).\
    \ Ensure these routes include middleware for authentication and authorization checks based on user roles and client assignments.\n\
    \n6. Build the frontend Todo List interface in React within the `src` folder. Create components `TodoList.jsx` and `TodoItem.jsx`\
    \ for displaying the list of tasks and individual tasks, respectively. These components should fetch and display data\
    \ from the backend, support sorting/filtering tasks, and provide UI elements for marking tasks as completed and deleting\
    \ tasks. Use Axios for API requests and Bootstrap for styling.\n\n7. Add the ability for users to add and edit Todo items\
    \ via modal forms in the frontend. Create two new components, `AddTodoModal.jsx` and `EditTodoModal.jsx`, which include\
    \ form inputs for task name, description, due date, and priority level. These components should handle form submissions\
    \ by sending POST and PUT requests to the backend's corresponding Todo routes. Integrate these modals into the `TodoList.jsx`\
    \ component.\n\n8. Implement access control in both frontend and backend. In the backend, enhance the authentication middleware\
    \ to verify user roles and permissions before allowing access to specific routes. In the frontend, conditionally render\
    \ UI components based on the user's role and permissions (e.g., editing and deleting Todo items). This task includes updating\
    \ the React Router setup in `App.jsx` to protect certain routes based on user authentication and role.\n\n9. Set up notifications\
    \ for upcoming Todo item deadlines in the backend. Create a script in the `backend` folder that periodically checks for\
    \ Todo items nearing their due dates and sends notifications via email. Utilize a library like Nodemailer for email sending,\
    \ and configure it to use SMTP with credentials stored in the `.env` file. The frequency of the checks and the definition\
    \ of 'upcoming' (e.g., within 24 hours) should be configurable.\n\n10. Finalize the project by ensuring all environment\
    \ variables are properly configured in the `.env` file, including database connection strings, server port, session secret,\
    \ and email SMTP settings. Check that the frontend and backend are fully integrated, with the frontend correctly displaying\
    \ data from the backend and handling user interactions. This task also includes a final review of the codebase for consistency,\
    \ readability, and adherence to best practices.\n\n```\n\nYou are currently working on task #1 with the following description:\n\
    ```\nImplement the MongoDB connection using Mongoose in a new file named `database.js` in the `backend` folder. In this\
    \ file, use dotenv to load environment variables and mongoose to connect to MongoDB. The connection string should be stored\
    \ in a `.env` file at the root of the project for security reasons. This task includes handling connection errors and\
    \ logging successful database connection messages to the console.\n```\n\n\nNow, tell me all the code that needs to be\
    \ written to implement ONLY this task and have it fully working and all commands that need to be run to implement this\
    \ task.\n\n**IMPORTANT**\nRemember, I created an empty folder where I will start writing files that you tell me and that\
    \ are needed for this app.\n\n**IMPORTANT**: Pay attention to file paths: if the command or argument is a file or folder\
    \ from the project, use paths relative to the project root (for example, use `./somefile` instead of `/somefile`).\nDO\
    \ NOT specify commands to create any folders or files, they will be created automatically - just specify the relative\
    \ path to each file that needs to be written.\n\n**IMPORTANT**: When creating and naming new files, ensure the file naming\
    \ (camelCase, kebab-case, underscore_case, etc) is consistent with the best practices and coding style of the language.\n\
    \nAll the steps will be executed in order in which you give them, so it is very important that you think about all steps\
    \ before you start listing them. For example, you should never code something before you install dependencies or you should\
    \ never try access a file before it exists in project.\n\n**IMPORTANT**\nYou must not tell me to run a command in the\
    \ database or anything OS related - only if some dependencies need to be installed. If there is a need to run an OS related\
    \ command, specifically tell me that this should be labeled as \"Human Intervention\" and explain what the human needs\
    \ to do.\nAvoid using \"Human Intervention\" if possible. You should NOT use \"Human Intervention\" for anything else\
    \ than steps that you can't execute. Also, you must not use \"Human Intervention\" to ask user to test that the application\
    \ works, because this will be done separately after all the steps are finished - no need to ask the user now.\n\nHere\
    \ are a few examples when and how to use \"Human Intervention\":\n------------------------start_of_example_1---------------------------\n\
    Here is an example of good response for the situation where it seems like 3rd party API, in this case Facebook, is not\
    \ working:\n\n* \"Human Intervention\"\n\"1. Check latest Facebook API documentation for updates on endpoints, parameters,\
    \ or authentication.\n2. Verify Facebook API key/authentication and request format to ensure they are current and correctly\
    \ implemented.\n3. Use REST client tools like Postman or cURL to directly test the Facebook API endpoints.\n4. Check the\
    \ Facebook API's status page for any reported downtime or service issues.\n5. Try calling the Facebook API from a different\
    \ environment to isolate the issue.\"\n------------------------end_of_example_1---------------------------\n\n------------------------start_of_example_2---------------------------\n\
    Here is an example of good response for the situation where the user needs to enable some settings in their Gmail account:\n\
    \n* \"Human Intervention\"\n\"To enable sending emails from your Node.js app via your Gmail, account, you need to do the\
    \ following:\n1. Log in to your Gmail account.\n2. Go to 'Manage your Google Account' > Security.\n3. Scroll down to 'Less\
    \ secure app access' and turn it on.\n4. Under 'Signing in to Google', select 'App Passwords'. (You may need to sign in\
    \ again)\n5. At the bottom, click 'Select app' and choose the app you\u2019re using.\n6. Click 'Generate'.\nThen, use\
    \ your gmail address and the password generated in the step #6 and put it into the .env file.\"\n------------------------end_of_example_2---------------------------\n\
    \n------------------------start_of_example_3---------------------------\nHere is an example when there are issues with\
    \ writing to the MongoDB connection:\n\n* \"Human Intervention\"\n\"1. Verify the MongoDB credentials provided have write\
    \ permissions, not just read-only access.\n2. Confirm correct database and collection names are used when connecting to\
    \ database.\n3. Update credentials if necessary to include insert document permissions.\"\n------------------------end_of_example_3---------------------------\n\
    \n**IMPORTANT**\nWhen you think about in which file should the new code go to, always try to make files as small as possible\
    \ and put code in more smaller files rather than in one big file.\n\nNever use the port 5000 to run the app, it's reserved."
- role: assistant
  content: "To implement task #1, follow these steps:\n\n1. **Install Dependencies**: Run the command to install `mongoose`\
    \ and `dotenv` as they are necessary for connecting to MongoDB and managing environment variables.\n   ```sh\n   npm install\
    \ mongoose dotenv\n   ```\n\n2. **Create .env File**: Add a new file at the root of the project.\n   - File path: `./.env`\n\
    \   - Content:\n     ```\n     MONGODB_URI=your_mongodb_connection_string_here\n     ```\n\n3. **Create Database Connection\
    \ File**: Implement the MongoDB connection using Mongoose.\n   - File path: `./backend/database.js`\n   - Content:\n \
    \    ```javascript\n     const mongoose = require('mongoose');\n     require('dotenv').config();\n\n     const connectDB\
    \ = async () => {\n       try {\n         await mongoose.connect(process.env.MONGODB_URI, {\n           useNewUrlParser:\
    \ true,\n           useUnifiedTopology: true,\n         });\n         console.log('MongoDB connection SUCCESS');\n   \
    \    } catch (error) {\n         console.error('MongoDB connection FAIL', error);\n         process.exit(1);\n       }\n\
    \     };\n\n     module.exports = connectDB;\n     ```\n\nThese steps will set up the MongoDB connection for your project,\
    \ utilizing environment variables for secure storage of sensitive information like your database connection string."
- role: user
  content: "Ok, now, take your previous message that starts with `To implement task #1, follow` and ends with `like your database\
    \ connection string.` and convert it to a list of actionable steps that will be executed by a machine. Analyze the entire\
    \ message, think step by step and make sure that you don't omit any information when converting this message to steps.\n\
    \nEach step can be either:\n\n* `command` - command to run (must be able to run on a Windows machine, assume current working\
    \ directory is project root folder)\n* `save_file` - create or update ONE file\n* `human_intervention` - if you need the\
    \ human to do something, use this type of step and explain in details what you want the human to do. NEVER use `human_intervention`\
    \ for testing, as testing will be done separately by a dedicated QA after all the steps are done. Also you MUST NOT use\
    \ `human_intervention` to ask the human to write or review code.\n\n**IMPORTANT**: In `code_change_description` field\
    \ of `save_file` step, you must provide empty string. If multiple changes are required for same file, you must provide\
    \ single `save_file` step for each file.\n\n**IMPORTANT**: When creating and naming new files, ensure the file naming\
    \ (camelCase, kebab-case, underscore_case, etc) is consistent with the best practices and coding style of the language.\n\
    \n**IMPORTANT**: Pay attention to file paths: if the command or argument is a file or folder from the project, use paths\
    \ relative to the project root (for example, use `./somefile` instead of `/somefile`).\n\nAll the steps will be executed\
    \ in order in which you give them, so it is very important that you think about all steps before you start listing them.\
    \ For example, you should never code something before you install dependencies or you should never try access a file before\
    \ it exists in project.\n\n**IMPORTANT**: Remember, NEVER output human intervention steps to do manual tests or coding\
    \ tasks, even if the previous message asks for it! The testing will be done *after* these steps and you MUST NOT include\
    \ testing in these steps.\n\nExamples:\n------------------------example_1---------------------------\n```\n{\n  \"tasks\"\
    : [\n    {\n      \"type\": \"save_file\",\n      \"save_file\": {\n        \"path\": \"./server.js\",\n        \"code_change_description\"\
    : \"\",\n      },\n    },\n    {\n      \"type\": \"command\",\n      \"command\": {\n        \"command\": \"mv ./index.js\
    \ ./public/index.js\"\",\n        \"timeout\": \"5000\",\n        \"success_message\": \"\",\n        \"command_id\":\
    \ \"move_index_file\"\n      }\n    }\n  ]\n}\n```\n------------------------end_of_example_1---------------------------"
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"tasks\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of smaller development steps.\",\n        \"items\": {\n            \"oneOf\": [\n                {\n       \
    \             \"type\": \"object\",\n                    \"properties\": {\n                        \"type\": {\n    \
    \                        \"const\": \"command\",\n                            \"description\": \"Type of the development\
    \ step that needs to be done to complete the entire task.\"\n                        },\n                        \"command\"\
    : {\n                            \"type\": \"object\",\n                            \"description\": \"Command that needs\
    \ to be run to complete the current task. This should be used only if the task is of a type \\\"command\\\".\",\n    \
    \                        \"properties\": {\n                                \"command\": {\n                         \
    \           \"type\": \"string\",\n                                    \"description\": \"A single command that needs\
    \ to be executed.\"\n                                },\n                                \"timeout\": {\n            \
    \                        \"type\": \"number\",\n                                    \"description\": \"Timeout in milliseconds\
    \ that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish\
    \ by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started\
    \ successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project\
    \ directory, always create it by running a command `mkdir`\"\n                                },\n                   \
    \             \"success_message\": {\n                                    \"type\": \"string\",\n                    \
    \                \"description\": \"A message to look for in the output of the command to determine if successful or not.\"\
    \n                                },\n                                \"command_id\": {\n                            \
    \        \"type\": \"string\",\n                                    \"description\": \"If the process needs to continue\
    \ running after the command is executed provide a unique command identifier which you can use to kill the process later.\"\
    \n                                }\n                            },\n                            \"required\": [\n   \
    \                             \"command\",\n                                \"timeout\"\n                            ]\n\
    \                        }\n                    },\n                    \"required\": [\n                        \"type\"\
    ,\n                        \"command\"\n                    ]\n                },\n                {\n               \
    \     \"type\": \"object\",\n                    \"properties\": {\n                        \"type\": {\n            \
    \                \"const\": \"save_file\",\n                            \"description\": \"Type of the development step\
    \ that needs to be done to complete the entire task.\"\n                        },\n                        \"save_file\"\
    : {\n                            \"type\": \"object\",\n                            \"description\": \"A file that should\
    \ be created or updated.\",\n                            \"properties\": {\n                                \"path\":\
    \ {\n                                    \"type\": \"string\",\n                                    \"description\": \"\
    Full path of the file with the file name.\"\n                                },\n                                \"code_change_description\"\
    : {\n                                    \"type\": \"string\",\n                                    \"description\": \"\
    Empty string\"\n                                }\n                            },\n                            \"required\"\
    : [\n                                \"path\",\n                                \"code_change_description\"\n        \
    \                    ]\n                        }\n                    },\n                    \"required\": [\n     \
    \                   \"type\",\n                        \"save_file\"\n                    ]\n                },\n    \
    \            {\n                    \"type\": \"object\",\n                    \"properties\": {\n                   \
    \     \"type\": {\n                            \"const\": \"human_intervention\",\n                            \"description\"\
    : \"Development step that will be executed by a human. You should avoid using this step if possible, task does NOT need\
    \ to have \\\"human_intervention\\\" step.\"\n                        },\n                        \"human_intervention_description\"\
    : {\n                            \"type\": \"string\",\n                            \"description\": \"Very clear description\
    \ of step where human intervention is needed.\"\n                        }\n                    },\n                 \
    \   \"required\": [\n                        \"type\",\n                        \"human_intervention_description\"\n \
    \                   ]\n                }\n            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n  \"tasks\": [\n    {\n      \"type\": \"command\",\n      \"command\": {\n        \"command\": \"\
  npm install mongoose dotenv\",\n        \"timeout\": 60000\n      }\n    },\n    {\n      \"type\": \"save_file\",\n   \
  \   \"save_file\": {\n        \"path\": \"./.env\",\n        \"code_change_description\": \"\"\n      }\n    },\n    {\n\
  \      \"type\": \"save_file\",\n      \"save_file\": {\n        \"path\": \"./backend/database.js\",\n        \"code_change_description\"\
  : \"\"\n      }\n    }\n  ]\n}\n```"
