endpoint: OPENAI
model: gpt-4-turbo-preview
messages:
- role: system
  content: You are an experienced tech lead in a software development agency and your main task is to break down the project
    into smaller tasks that developers will do. You must specify each task as clear as possible. Each task must have a description
    of what needs to be implemented.
- role: user
  content: "You are working in a software development agency and a project manager and software architect approach you telling\
    \ you that you're assigned to work on a new project. You are working on a App called \"Elite\" and you need to create\
    \ a detailed development plan so that developers can start developing the app.\n\nHere is a high level description of\
    \ \"Elite\":\n```\nTodo List Functionality:\n\n1. **Add Todo Item**: Users can add tasks with details such as task name,\
    \ description, due date, and priority level. Should there be any specific fields related to healthcare activities that\
    \ need to be included in the task details?\n\n2. **View Todo List**: Display a list of tasks for each client, with the\
    \ ability to sort or filter tasks by status (pending, completed), due date, or priority.\n\n3. **Edit Todo Item**: Users\
    \ can edit the details of an existing task. Are there any restrictions on who can edit tasks (e.g., only the user who\
    \ created the task or any user with access to that client)?\n\n4. **Mark as Completed**: Users can mark tasks as completed.\
    \ Should there be an option to revert a task back to pending status?\n\n5. **Delete Todo Item**: Users can delete tasks.\
    \ Should this be a soft delete (where the task is hidden but not permanently removed) or a hard delete (permanently removed)?\n\
    \n6. **Access Control**: Define which roles have access to view and manage the Todo lists. Is access to Todo lists based\
    \ on the client they are assigned to, or can certain roles view all clients' Todo lists?\n\n7. **Notifications/Reminders**:\
    \ Should the system send notifications or reminders for upcoming deadlines for tasks? If so, which method(s) should be\
    \ used (email, SMS, in-app notifications)?\n\nPlease provide details on these aspects of the Todo list functionality to\
    \ ensure the specification fully captures the project requirements.\nAdditional info/examples:\n1. The app is built using\
    \ React.\n2. The app features a login page.\n3. Users can change their password.\n4. Upon login, users can see the names\
    \ and pictures of clients.\n5. Clicking on a client's name or picture takes the user to that client's todo list.\n```\n\
    \nHere is a short description of the project architecture:\nThe application will have a React front-end for dynamic user\
    \ interfaces, with Node.js and Express serving as the backend for API requests, and MongoDB for the database. Authentication\
    \ will be handled via session-based login, and the app will provide CRUD operations for todo items, along with access\
    \ control and notifications.\n\nHere are the technologies that you need to use for this project:\n\n* Node.js - JavaScript\
    \ runtime for building apps. This is required to be able to run the app you're building.\n* MongoDB - NoSQL database.\
    \ If you don't want to install MongoDB locally, you can use a cloud version such as MongoDB Atlas.\n* express - Express\
    \ web server for Node\n* mongoose - Mongoose ORM for MongoDB interactions\n* bcrypt - Library to help hash passwords\n\
    * express-session - Middleware for session management in Express\n* react - A JavaScript library for building user interfaces\n\
    * react-dom - React package for working with the DOM\n* react-router-dom - DOM bindings for React Router\n* axios - Promise\
    \ based HTTP client for the browser and node.js\n* bootstrap - Front-end framework for developing responsive, mobile first\
    \ projects on the web\n* dotenv - Module to load environment variables from a .env file\n\n\n\nThe developers have already\
    \ used a project scaffolding tool that creates the initial boilerplate for the project:\nThe code so far includes:\n*\
    \ Initial setup with Vite for fast development\n* Basic project structure for React development\n* Development server\
    \ setup for hot reloading\n* Minimal configuration to get started with React\n\nHere are the relevant files:\n---START_OF_FILES---\n\
    **\\.eslintrc.cjs** (21 lines of code):\n```\nmodule.exports = {\n  root: true,\n  env: { browser: true, es2020: true\
    \ },\n  extends: [\n    'eslint:recommended',\n    'plugin:react/recommended',\n    'plugin:react/jsx-runtime',\n    'plugin:react-hooks/recommended',\n\
    \  ],\n  ignorePatterns: ['dist', '.eslintrc.cjs'],\n  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\n\
    \  settings: { react: { version: '18.2' } },\n  plugins: ['react-refresh'],\n  rules: {\n    'react/jsx-no-target-blank':\
    \ 'off',\n    'react-refresh/only-export-components': [\n      'warn',\n      { allowConstantExport: true },\n    ],\n\
    \  },\n}\n\n```\n\n**\\.gitignore** (24 lines of code):\n```\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\
    pnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\ndist\ndist-ssr\n*.local\n\n# Editor directories and files\n.vscode/*\n\
    !.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n```\n\n**\\index.html** (12 lines\
    \ of code):\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\"\
    \ content=\"width=device-width, initial-scale=1.0\" />\n    <title>Elite</title>\n  </head>\n  <body>\n    <div id=\"\
    root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n\n```\n\n**\\package.json**\
    \ (26 lines of code):\n```\n{\n  \"name\": \"Elite\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"\
    module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --ext js,jsx\
    \ --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\"\
    : {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\"\
    : \"^18.2.64\",\n    \"@types/react-dom\": \"^18.2.21\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"eslint\": \"\
    ^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\"\
    : \"^0.4.5\",\n    \"vite\": \"^5.1.6\"\n  }\n}\n\n```\n\n**\\vite.config.js** (7 lines of code):\n```\nimport { defineConfig\
    \ } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n\
    \  plugins: [react()],\n})\n\n```\n\n**src\\App.css** (7 lines of code):\n```\n#root {\n  max-width: 1280px;\n  margin:\
    \ 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n\n```\n\n**src\\App.jsx** (11 lines of code):\n```\nimport './App.css'\n\
    \nfunction App() {\n  return (\n    <>\n      <h1>Elite</h1>\n    </>\n  )\n}\n\nexport default App\n\n```\n\n**src\\\
    index.css** (20 lines of code):\n```\n:root {\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing:\
    \ antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n\
    \  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\n\n```\n\n**src\\\
    main.jsx** (10 lines of code):\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from\
    \ './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n\
    \    <App />\n  </React.StrictMode>,\n)\n\n```\n\n---END_OF_FILES---\n\n\nBefore we go into the coding part, I want you\
    \ to split the development process of creating this app into smaller tasks so that it is easier to develop, debug and\
    \ make the app work.\n\nEach task needs to be related only to the development of this app and nothing else - once the\
    \ app is fully working, that is it. There shouldn't be a task for researching, deployment, writing documentation, testing\
    \ or anything that is not writing the actual code.\n\n**IMPORTANT**\nAs an experienced tech lead you always follow rules\
    \ on how to create tasks. Dividing project into tasks is extremely important job and you have to do it very carefully.\n\
    \nNow, based on the project details provided, think task by task and create the entire development plan. Continue from\
    \ the existing code listed above and specify each task until the moment when the entire app should be fully working. You\
    \ should not reimplement what's already done - just continue from the implementation already there while strictly following\
    \ these rules:\n\nRule #1\nThere should never be a task that is only testing or ensuring something works, every task must\
    \ have coding involved. Have this in mind for every task, but it is extremely important for last task of project. Testing\
    \ if app works will be done as part of each task.\n\nRule #2\nThis rule applies to the complexity of tasks.\nYou have\
    \ to make sure the project is not split into tasks that are too small or simple for no reason but also not too big or\
    \ complex so that they are hard to develop, debug and review.\nHave in mind that project already has workspace folder\
    \ created and only system dependencies installed. You don't have to create tasks for that.\nHere are examples of poorly\
    \ created tasks:\n\n**too simple tasks**\n- Set up a Node.js project and install all necessary dependencies.\n- Establish\
    \ a MongoDB database connection using Mongoose with the IP '127.0.0.1'.\n\n**too complex tasks**\n- Set up Node.js project\
    \ with /home, /profile, /register and /login routes that will have user authentication, connection to MongoDB with user\
    \ schemas, mailing of new users and frontend with nice design.\n\nYou must to avoid creating tasks that are too simple\
    \ or too complex. You have to aim to create tasks that are medium complexity. Here are examples of tasks that are good:\n\
    \n**good tasks**\n- Set up a Node.js project, install all necessary dependencies and set up an express server with a simple\
    \ route to `/ping` that returns the status 200.\n- Establish a MongoDB database connection and implement the message schema\
    \ using Mongoose for persistent storage of messages.\n\nRule #3\nThis rule applies to the number of tasks you will create.\n\
    Every app should have different number of tasks depending on complexity. Think task by task and create the minimum number\
    \ of tasks that are relevant for this specific app. Here are some examples of apps with different complexity that can\
    \ give you guidance on how many tasks you should create:\n\nExample #1:\napp description: \"I want to create an app that\
    \ will just say 'Hello World' when I open it on my localhost:3000.\"\nnumber of tasks: 1-2\n\nExample #2:\napp description:\
    \ \"Create a node.js app that enables users to register and log into the app. On frontend it should have /home (shows\
    \ user data), /register and /login. It should use sessions to keep user logged in.\"\nnumber of tasks: 2-4\n\nExample\
    \ #3:\napp description: \"A cool online shoe store, with a sleek look. In terms of data models, there are shoes, categories\
    \ and user profiles. For web pages: product listing, details, shopping cart. It must look cool and jazzy.\"\nnumber of\
    \ tasks: 5-15\n\nRule #4\nThis rule applies to writing task 'description'.\nEvery task must have a clear and very detailed\
    \ (must be minimum of 4 sentences but can be more) 'description'. It must be very clear so that even developers who just\
    \ moved to this project can execute them without additional questions. It is not enough to just write something like \"\
    Create a route for /home\". You have to describe what needs to be done in that route, what data needs to be returned,\
    \ what should be the status code, etc. Give as many details as possible and make sure no information is missing that could\
    \ be needed for this task.\nHere is an example of good and bad task description:\n\n**bad task**\n{\n    \"description\"\
    : \"Create a route for /dashboard\"\n}\n\n**good task**\n{\n    \"description\": \"In 'route.js' add a route for /dashboard\
    \ that returns the status 200. Route should be accessible only for logged in users. In 'middlewares.js' there should be\
    \ a check if user is logged in using session. If user is not logged in, it should redirect to /login. If user is logged\
    \ in, it should return the user data. User data should be fetched from database in 'users' collection using the user id\
    \ from session.\"\n}\n\nRule #5\nWhen creating and naming new files, ensure the file naming (camelCase, kebab-case, underscore_case,\
    \ etc) is consistent with the best practices and coding style of the language.\nPay attention to file paths: if the command\
    \ or argument is a file or folder from the project, use paths relative to the project root (for example, use `./somefile`\
    \ instead of `/somefile`)."
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"plan\": {\n        \"type\": \"array\",\n        \"description\"\
    : \"List of development tasks that need to be done to implement the entire plan.\",\n        \"items\": {\n          \
    \  \"type\": \"object\",\n            \"description\": \"Development task that needs to be done to implement the entire\
    \ plan. It contains all details that developer who is not familiar with project needs to know to implement the task.\"\
    ,\n            \"properties\": {\n                \"description\": {\n                    \"type\": \"string\",\n    \
    \                \"description\": \"Very detailed description of the development task that needs to be done to implement\
    \ the entire plan.\"\n                }\n            },\n            \"required\": [\n                \"description\"\n\
    \            ]\n        }\n    }\n}\n```\n\n"
response: "```json\n{\n    \"plan\": [\n        {\n            \"description\": \"Implement the MongoDB connection using Mongoose\
  \ in a new file named `database.js` in the `backend` folder. In this file, use dotenv to load environment variables and\
  \ mongoose to connect to MongoDB. The connection string should be stored in a `.env` file at the root of the project for\
  \ security reasons. This task includes handling connection errors and logging successful database connection messages to\
  \ the console.\"\n        },\n        {\n            \"description\": \"Set up the Express server in a file named `server.js`\
  \ in the `backend` folder. This server should import Express and initialize it to listen on a port specified in the `.env`\
  \ file. The server should have a simple GET route `/api/ping` that returns a JSON response `{ success: true, message: 'Pong'\
  \ }` to test if the server is running. Use dotenv to load the port from the `.env` file.\"\n        },\n        {\n    \
  \        \"description\": \"Create the user authentication system in the `backend` folder. This system includes a model\
  \ for users in `models/userModel.js`, using Mongoose schema that contains fields for username, password (hashed), and roles.\
  \ Implement password hashing in the user model's `pre-save` hook using bcrypt. Also, set up routes for user registration\
  \ and login in a new file `routes/authRoutes.js`, utilizing express-session for session management.\"\n        },\n    \
  \    {\n            \"description\": \"Develop the frontend login page using React. In the `src` folder, create a new component\
  \ `Login.jsx` that includes form inputs for username and password, and a submit button. Use Axios to send a POST request\
  \ to the backend's login route when the form is submitted. Handle authentication feedback (success/error) and redirect to\
  \ the main Todo List page upon successful login.\"\n        },\n        {\n            \"description\": \"Implement the\
  \ Todo List functionality in the backend. This includes creating a Todo model in `models/todoModel.js` with fields for task\
  \ name, description, due date, priority, status, and associated client ID. Create a new file `routes/todoRoutes.js` for\
  \ the Todo-related routes (CRUD operations). Ensure these routes include middleware for authentication and authorization\
  \ checks based on user roles and client assignments.\"\n        },\n        {\n            \"description\": \"Build the\
  \ frontend Todo List interface in React within the `src` folder. Create components `TodoList.jsx` and `TodoItem.jsx` for\
  \ displaying the list of tasks and individual tasks, respectively. These components should fetch and display data from the\
  \ backend, support sorting/filtering tasks, and provide UI elements for marking tasks as completed and deleting tasks. Use\
  \ Axios for API requests and Bootstrap for styling.\"\n        },\n        {\n            \"description\": \"Add the ability\
  \ for users to add and edit Todo items via modal forms in the frontend. Create two new components, `AddTodoModal.jsx` and\
  \ `EditTodoModal.jsx`, which include form inputs for task name, description, due date, and priority level. These components\
  \ should handle form submissions by sending POST and PUT requests to the backend's corresponding Todo routes. Integrate\
  \ these modals into the `TodoList.jsx` component.\"\n        },\n        {\n            \"description\": \"Implement access\
  \ control in both frontend and backend. In the backend, enhance the authentication middleware to verify user roles and permissions\
  \ before allowing access to specific routes. In the frontend, conditionally render UI components based on the user's role\
  \ and permissions (e.g., editing and deleting Todo items). This task includes updating the React Router setup in `App.jsx`\
  \ to protect certain routes based on user authentication and role.\"\n        },\n        {\n            \"description\"\
  : \"Set up notifications for upcoming Todo item deadlines in the backend. Create a script in the `backend` folder that periodically\
  \ checks for Todo items nearing their due dates and sends notifications via email. Utilize a library like Nodemailer for\
  \ email sending, and configure it to use SMTP with credentials stored in the `.env` file. The frequency of the checks and\
  \ the definition of 'upcoming' (e.g., within 24 hours) should be configurable.\"\n        },\n        {\n            \"\
  description\": \"Finalize the project by ensuring all environment variables are properly configured in the `.env` file,\
  \ including database connection strings, server port, session secret, and email SMTP settings. Check that the frontend and\
  \ backend are fully integrated, with the frontend correctly displaying data from the backend and handling user interactions.\
  \ This task also includes a final review of the codebase for consistency, readability, and adherence to best practices.\"\
  \n        }\n    ]\n}\n```"
