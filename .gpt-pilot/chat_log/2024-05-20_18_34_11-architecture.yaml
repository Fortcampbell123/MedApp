endpoint: OPENAI
model: gpt-4-turbo-preview
messages:
- role: system
  content: You are a world class software architect. You focus on creating architecture for Minimum Viable Product versions
    of Apps developed as fast as possible with as many ready-made technologies as possible.
- role: user
  content: "You're designing the architecture and technical specifications for a new project.\n\nIf the project requirements\
    \ call out for specific technology, use that. Otherwise, if working on a web app, prefer Node.js for the backend (with\
    \ Express if a web server is needed, and MongoDB if a database is needed), and Bootstrap for the front-end. You MUST NOT\
    \ use Docker, Kubernetes, microservices and single-page app frameworks like React, Next.js, Angular, Vue or Svelte unless\
    \ the project details explicitly require it.\n\nHere are the details for the new project:\n-----------------------------\n\
    Here is a high level description of \"Elite\":\n```\nTodo List Functionality:\n\n1. **Add Todo Item**: Users can add tasks\
    \ with details such as task name, description, due date, and priority level. Should there be any specific fields related\
    \ to healthcare activities that need to be included in the task details?\n\n2. **View Todo List**: Display a list of tasks\
    \ for each client, with the ability to sort or filter tasks by status (pending, completed), due date, or priority.\n\n\
    3. **Edit Todo Item**: Users can edit the details of an existing task. Are there any restrictions on who can edit tasks\
    \ (e.g., only the user who created the task or any user with access to that client)?\n\n4. **Mark as Completed**: Users\
    \ can mark tasks as completed. Should there be an option to revert a task back to pending status?\n\n5. **Delete Todo\
    \ Item**: Users can delete tasks. Should this be a soft delete (where the task is hidden but not permanently removed)\
    \ or a hard delete (permanently removed)?\n\n6. **Access Control**: Define which roles have access to view and manage\
    \ the Todo lists. Is access to Todo lists based on the client they are assigned to, or can certain roles view all clients'\
    \ Todo lists?\n\n7. **Notifications/Reminders**: Should the system send notifications or reminders for upcoming deadlines\
    \ for tasks? If so, which method(s) should be used (email, SMS, in-app notifications)?\n\nPlease provide details on these\
    \ aspects of the Todo list functionality to ensure the specification fully captures the project requirements.\nAdditional\
    \ info/examples:\n1. The app is built using React.\n2. The app features a login page.\n3. Users can change their password.\n\
    4. Upon login, users can see the names and pictures of clients.\n5. Clicking on a client's name or picture takes the user\
    \ to that client's todo list.\n```\n\n\n\n-----------------------------\n\nBased on these details, think step by step\
    \ to design the architecture for the project and choose technologies to use in building it.\n\n1. First, design and describe\
    \ project architecture in general terms\n2. Then, list any system dependencies that should be installed on the system\
    \ prior to start of development.  For each system depedency, output a Windows command to check whether it's installed.\n\
    3. Finally, list any other 3rd party packages or libraries that will be used (that will be installed later using packager\
    \ a package manager in the project repository/environment).\n4. Optionally, choose a project starter template.\n\nYou\
    \ have an option to use a project template that implements standard boilerplate/scaffolding so you can start faster and\
    \ be more productive. To be considered, a template must be compatible with the architecture and technologies you've choosen\
    \ (it doesn't need to implement everything that will be used in the project, just a useful subset). If multiple templates\
    \ can be considered, pick one that's the best match.\n\nIf no project templates are a good match, don't pick any! It's\
    \ better to start from scratch than to use a template that is not a good fit for the project and then spend time reworking\
    \ it to fit the requirements.\n\nHere are the available project templates:\n\n### node_express_mongoose\nNode + Express\
    \ + MongoDB web app with session-based authentication, EJS views and Bootstrap 5\n\nContains:\n* initial Node + Express\
    \ setup\n* User model in Mongoose ORM with username and password fields, ensuring username is unique and hashing passwords\
    \ with bcrypt prior to saving to the database\n* session-based authentication using username + password (hashed using\
    \ bcrypt) in routes/authRoutes.js, using express-session\n* authentication middleware to protect routes that require login\n\
    * EJS view engine, html head, header and footer EJS partials, with included Boostrap 5.x CSS and JS\n* routes and EJS\
    \ views for login, register, and home (main) page\n* config loading from environment using dotenv with a placeholder .env.example\
    \ file: you will need to create a .env file with your own values\n\n### javascript_react\nReact web app using Vite devserver/bundler\n\
    \nContains:\n* Initial setup with Vite for fast development\n* Basic project structure for React development\n* Development\
    \ server setup for hot reloading\n* Minimal configuration to get started with React\n\n\n*IMPORTANT*: You must follow\
    \ these rules while creating your project:\n\n* You must only list *system* dependencies, ie. the ones that need to be\
    \ installed (typically as admin) to set up the programming language, database, etc. Any packages that will need to be\
    \ installed via language/platform-specific package managers are *not* system dependencies.\n* If there are several popular\
    \ options (such as Nginx or Apache for web server), pick one that would be more suitable for the app in question.\n* DO\
    \ NOT include text editors, IDEs, shells, OpenSSL, CLI tools such as git, AWS, or Stripe clients, or other utilities in\
    \ your list. only direct dependencies required to build and run the project.\n* If a dependency (such as database) has\
    \ a cloud alternative or can be installed on another computer (ie. isn't required on this computer), you must mark it\
    \ as `required_locally: false`\n\nOutput only your response in JSON format like in this example, without other commentary:\n\
    ```json\n{\n    \"architecture\": \"Detailed description of the architecture of the application\",\n    \"system_dependencies\"\
    : [\n        {\n            \"name\": \"Node.js\",\n            \"description\": \"JavaScript runtime for building apps.\
    \ This is required to be able to run the app you're building.\",\n            \"test\": \"node --version\",\n        \
    \    \"required_locally\": true\n        },\n        {\n            \"name\": \"MongoDB\",\n            \"description\"\
    : \"NoSQL database. If you don't want to install MongoDB locally, you can use a cloud version such as MongoDB Atlas.\"\
    ,\n            \"test\": \"mongosh --version\",\n            \"required_locally\": false\n        },\n        ...\n  \
    \  ],\n    \"package_dependencies\": [\n        {\n            \"name\": \"express\",\n            \"description\": \"\
    Express web server for Node\"\n        },\n        ...\n    ],\n    \"template\": \"name of the project template to use\"\
    \ // or null if you decide not to use a project template\n}\n```"
- role: user
  content: "**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is\
    \ the schema for the expected JSON object:\n```json\n{\n    \"architecture\": {\n        \"type\": \"string\",\n     \
    \   \"description\": \"General description of the app architecture.\"\n    },\n    \"system_dependencies\": {\n      \
    \  \"type\": \"array\",\n        \"description\": \"List of system dependencies required to build and run the app.\",\n\
    \        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n\
    \                    \"type\": \"string\",\n                    \"description\": \"Name of the system dependency, for\
    \ example Node.js or Python.\"\n                },\n                \"description\": {\n                    \"type\":\
    \ \"string\",\n                    \"description\": \"One-line description of the dependency.\"\n                },\n\
    \                \"test\": {\n                    \"type\": \"string\",\n                    \"description\": \"Command\
    \ line to test whether the dependency is available on the system.\"\n                },\n                \"required_locally\"\
    : {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether this dependency must be\
    \ installed locally (as opposed to connecting to cloud or other server)\"\n                }\n            },\n       \
    \     \"required\": [\n                \"name\",\n                \"description\",\n                \"test\",\n      \
    \          \"required_locally\"\n            ]\n        }\n    },\n    \"package_dependencies\": {\n        \"type\":\
    \ \"array\",\n        \"description\": \"List of framework/language-specific packages used by the app.\",\n        \"\
    items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n          \
    \          \"type\": \"string\",\n                    \"description\": \"Name of the package dependency, for example Express\
    \ or React.\"\n                },\n                \"description\": {\n                    \"type\": \"string\",\n   \
    \                 \"description\": \"One-line description of the dependency.\"\n                }\n            },\n  \
    \          \"required\": [\n                \"name\",\n                \"description\"\n            ]\n        }\n   \
    \ },\n    \"template\": {\n        \"type\": [\n            \"string\",\n            \"null\"\n        ],\n        \"\
    description\": \"One of the available project templates.\"\n    }\n}\n```\n\n"
response: "```json\n{\n    \"architecture\": \"The application will have a React front-end for dynamic user interfaces, with\
  \ Node.js and Express serving as the backend for API requests, and MongoDB for the database. Authentication will be handled\
  \ via session-based login, and the app will provide CRUD operations for todo items, along with access control and notifications.\"\
  ,\n    \"system_dependencies\": [\n        {\n            \"name\": \"Node.js\",\n            \"description\": \"JavaScript\
  \ runtime for building apps. This is required to be able to run the app you're building.\",\n            \"test\": \"node\
  \ --version\",\n            \"required_locally\": true\n        },\n        {\n            \"name\": \"MongoDB\",\n    \
  \        \"description\": \"NoSQL database. If you don't want to install MongoDB locally, you can use a cloud version such\
  \ as MongoDB Atlas.\",\n            \"test\": \"mongosh --version\",\n            \"required_locally\": false\n        }\n\
  \    ],\n    \"package_dependencies\": [\n        {\n            \"name\": \"express\",\n            \"description\": \"\
  Express web server for Node\"\n        },\n        {\n            \"name\": \"mongoose\",\n            \"description\":\
  \ \"Mongoose ORM for MongoDB interactions\"\n        },\n        {\n            \"name\": \"bcrypt\",\n            \"description\"\
  : \"Library to help hash passwords\"\n        },\n        {\n            \"name\": \"express-session\",\n            \"\
  description\": \"Middleware for session management in Express\"\n        },\n        {\n            \"name\": \"react\"\
  ,\n            \"description\": \"A JavaScript library for building user interfaces\"\n        },\n        {\n         \
  \   \"name\": \"react-dom\",\n            \"description\": \"React package for working with the DOM\"\n        },\n    \
  \    {\n            \"name\": \"react-router-dom\",\n            \"description\": \"DOM bindings for React Router\"\n  \
  \      },\n        {\n            \"name\": \"axios\",\n            \"description\": \"Promise based HTTP client for the\
  \ browser and node.js\"\n        },\n        {\n            \"name\": \"bootstrap\",\n            \"description\": \"Front-end\
  \ framework for developing responsive, mobile first projects on the web\"\n        },\n        {\n            \"name\":\
  \ \"dotenv\",\n            \"description\": \"Module to load environment variables from a .env file\"\n        }\n    ],\n\
  \    \"template\": \"javascript_react\"\n}\n```"
