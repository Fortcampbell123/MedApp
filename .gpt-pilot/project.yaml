name: Elite
description: 'Todo List Functionality:


  1. **Add Todo Item**: Users can add tasks with details such as task name, description, due date, and priority level. Should
  there be any specific fields related to healthcare activities that need to be included in the task details?


  2. **View Todo List**: Display a list of tasks for each client, with the ability to sort or filter tasks by status (pending,
  completed), due date, or priority.


  3. **Edit Todo Item**: Users can edit the details of an existing task. Are there any restrictions on who can edit tasks
  (e.g., only the user who created the task or any user with access to that client)?


  4. **Mark as Completed**: Users can mark tasks as completed. Should there be an option to revert a task back to pending
  status?


  5. **Delete Todo Item**: Users can delete tasks. Should this be a soft delete (where the task is hidden but not permanently
  removed) or a hard delete (permanently removed)?


  6. **Access Control**: Define which roles have access to view and manage the Todo lists. Is access to Todo lists based on
  the client they are assigned to, or can certain roles view all clients'' Todo lists?


  7. **Notifications/Reminders**: Should the system send notifications or reminders for upcoming deadlines for tasks? If so,
  which method(s) should be used (email, SMS, in-app notifications)?


  Please provide details on these aspects of the Todo list functionality to ensure the specification fully captures the project
  requirements.

  Additional info/examples:

  1. The app is built using React.

  2. The app features a login page.

  3. Users can change their password.

  4. Upon login, users can see the names and pictures of clients.

  5. Clicking on a client''s name or picture takes the user to that client''s todo list.'
user_stories: null
architecture: The application will have a React front-end for dynamic user interfaces, with Node.js and Express serving as
  the backend for API requests, and MongoDB for the database. Authentication will be handled via session-based login, and
  the app will provide CRUD operations for todo items, along with access control and notifications.
system_dependencies:
- name: Node.js
  description: JavaScript runtime for building apps. This is required to be able to run the app you're building.
  test: node --version
  required_locally: true
- name: MongoDB
  description: NoSQL database. If you don't want to install MongoDB locally, you can use a cloud version such as MongoDB Atlas.
  test: mongosh --version
  required_locally: false
development_plan:
- description: Implement the MongoDB connection using Mongoose in a new file named `database.js` in the `backend` folder.
    In this file, use dotenv to load environment variables and mongoose to connect to MongoDB. The connection string should
    be stored in a `.env` file at the root of the project for security reasons. This task includes handling connection errors
    and logging successful database connection messages to the console.
- description: 'Set up the Express server in a file named `server.js` in the `backend` folder. This server should import Express
    and initialize it to listen on a port specified in the `.env` file. The server should have a simple GET route `/api/ping`
    that returns a JSON response `{ success: true, message: ''Pong'' }` to test if the server is running. Use dotenv to load
    the port from the `.env` file.'
- description: Create the user authentication system in the `backend` folder. This system includes a model for users in `models/userModel.js`,
    using Mongoose schema that contains fields for username, password (hashed), and roles. Implement password hashing in the
    user model's `pre-save` hook using bcrypt. Also, set up routes for user registration and login in a new file `routes/authRoutes.js`,
    utilizing express-session for session management.
- description: Develop the frontend login page using React. In the `src` folder, create a new component `Login.jsx` that includes
    form inputs for username and password, and a submit button. Use Axios to send a POST request to the backend's login route
    when the form is submitted. Handle authentication feedback (success/error) and redirect to the main Todo List page upon
    successful login.
- description: Implement the Todo List functionality in the backend. This includes creating a Todo model in `models/todoModel.js`
    with fields for task name, description, due date, priority, status, and associated client ID. Create a new file `routes/todoRoutes.js`
    for the Todo-related routes (CRUD operations). Ensure these routes include middleware for authentication and authorization
    checks based on user roles and client assignments.
- description: Build the frontend Todo List interface in React within the `src` folder. Create components `TodoList.jsx` and
    `TodoItem.jsx` for displaying the list of tasks and individual tasks, respectively. These components should fetch and
    display data from the backend, support sorting/filtering tasks, and provide UI elements for marking tasks as completed
    and deleting tasks. Use Axios for API requests and Bootstrap for styling.
- description: Add the ability for users to add and edit Todo items via modal forms in the frontend. Create two new components,
    `AddTodoModal.jsx` and `EditTodoModal.jsx`, which include form inputs for task name, description, due date, and priority
    level. These components should handle form submissions by sending POST and PUT requests to the backend's corresponding
    Todo routes. Integrate these modals into the `TodoList.jsx` component.
- description: Implement access control in both frontend and backend. In the backend, enhance the authentication middleware
    to verify user roles and permissions before allowing access to specific routes. In the frontend, conditionally render
    UI components based on the user's role and permissions (e.g., editing and deleting Todo items). This task includes updating
    the React Router setup in `App.jsx` to protect certain routes based on user authentication and role.
- description: Set up notifications for upcoming Todo item deadlines in the backend. Create a script in the `backend` folder
    that periodically checks for Todo items nearing their due dates and sends notifications via email. Utilize a library like
    Nodemailer for email sending, and configure it to use SMTP with credentials stored in the `.env` file. The frequency of
    the checks and the definition of 'upcoming' (e.g., within 24 hours) should be configurable.
- description: Finalize the project by ensuring all environment variables are properly configured in the `.env` file, including
    database connection strings, server port, session secret, and email SMTP settings. Check that the frontend and backend
    are fully integrated, with the frontend correctly displaying data from the backend and handling user interactions. This
    task also includes a final review of the codebase for consistency, readability, and adherence to best practices.
